#include <IRremote.h>
/*Display Sensor*/

   // include the library code:
#include <LiquidCrystal.h>/*display sensor values on LCD*/
// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12,11,5,4,3,2);/**/
int potPin1 = A1;/*remove pin2 and change values, assign values of lcd ports*/
int ir_in = 2;
int led_pin = 13; 

int RECV_PIN = 6;
IRrecv irrecv(RECV_PIN);
decode_results results;
unsigned long mask;

long int_vcc; 
long min_vcc; 
long mil_ir_start; 
long mil_ir_end; 
long mil_ir; 

long ir_val;     // we'll just make this a 32-bit value 
int ir_bit_count; 
/*digitalWrite(RGB, HIGH);
   * Serial.print("time; ");
   * time = Millis();
   * Serial.println(time);
   * delay(500);
   * seconds = 7 seconds
   * if (seconds >0){
    seconds -= 1;}
    digitalWrite(RGB, HIGH);
    } else;
    digitalWrite(RGB, LOW);
    delay(500);
    }

 */

// IR high and IR low are back-to-front in the receiver. 
// If we're sending IR, the sensor will be low (its an open drain collector that 
// pulls an input LOW when it can see IR light) So IRLow relates to the LED being lit 

void IRLow(){ 
     // this fires on a high-to-low transition 
     // whenever the line is pulled low it's because we're receving IR light 
     // so reset the timer/counter 
     mil_ir_start = millis();      
     digitalWrite(led_pin,HIGH); 
} 

void IRHigh(){ 
     // whenever the line floats high, its because we've just turned off the IR light 
     // that is sending data to the receiver, so measure the width of the last pulse 
     // and do something wisth the data if necessary 
     mil_ir_end = millis(); 
     mil_ir = mil_ir_end - mil_ir_start; 
     digitalWrite(led_pin,LOW); 
      
     if(mil_ir < 11){ 
          Serial.print(mil_ir); 
          Serial.print(F(".")); 
     } 

     // decide what to do with the pulse width 
     if(mil_ir >=1 && mil_ir <=4){ 
          // treat this as a zero 
          ir_val = ir_val << 1; 
          ir_bit_count++; 
           
     }else if(mil_ir >=6 && mil_ir <=12){ 
          // treat this as a one 
          ir_val = ir_val << 1; 
          ir_val = ir_val|1;           
          ir_bit_count++; 
           
     }else if(mil_ir >=14 && mil_ir <=20){ 
          // this is a start/end message marker 
          // if we've received a message, validate it and parse 
          Serial.println(); 
          if(ir_val != 0){ parseMessage(); } 
           
          // now reset everything ready for the next blast 
          ir_bit_count = 0; 
          ir_val = 0; 
      
     } 

      
} 

void parseMessage(){ 
     // a message can be up to three bytes long 
     // we'll do simple XOR checksum on the fourth byte 
     // and squash them all together 

     int a = ir_val >> 24; 
     int b = ir_val >> 16; 
     int c = ir_val >> 8; 
     int d = ir_val & 255; 

     a = a & 0xFF; 
     b = b & 0xFF; 
     c = c & 0xFF; 
     d = d & 0xFF; 

     int k = a ^ b; 
     k = k ^ c; 
     if(k==d){ 
          // checksum success 
          Serial.print(F("Received: ")); 
          Serial.print(ir_val,HEX); 
          Serial.println(); 
           
     }else{ 
          // checksum fail 
          Serial.print(F("checksum fail a:")); 
          Serial.print(a,HEX); 
          Serial.print(F(" b:")); 
          Serial.print(b,HEX); 
          Serial.print(F(" c:")); 
          Serial.print(c,HEX); 
          Serial.print(F(" d:")); 
          Serial.print(d,HEX); 
          Serial.println(F(" ")); 
           
     } 
      
} 

void IRChange(){ 
     int b = digitalRead(ir_in); 
     if(b==HIGH){ IRHigh(); } else { IRLow();} 
} 

void setup() { 
     // put your setup code here, to run once: 
     
     
     Serial.begin(9600); 
     irrecv.enableIRIn(); // Start the receiver
     pinMode(led_pin,OUTPUT); 
     pinMode(ir_in,INPUT_PULLUP); 
// set up the LCD's number of columns and rows:
     lcd.begin(16, 2);/*compare*/
     lcd.clear();

     pinMode(potPin1, INPUT);
     // create an interrupt on pin 2 (IR receiver) 
     attachInterrupt(digitalPinToInterrupt(ir_in), IRChange, CHANGE); 
      
} 
/*starting code for timer and Traffic light*/
void loop() { 
     // put your main code here, to run repeatedly: 
      /*digitalWrite(ir_pin,HIGH);
       Serial.print("Time;");
       delay(700);
       time = millis();
       
       
      */
     delay(1000); 

lcd.setCursor(0,0); // Sets the cursor to col 0 and row 0
lcd.print("SensorVal1: "); // Prints Sensor Val: to LCD
lcd.print(analogRead(potPin1)); // Prints value on Potpin1 to LCD
lcd.setCursor(0,1); // Sets the cursor to col 1 and row 0
 // Prints Sensor Val: to LCD
 // Prints value on Potpin1 to LCD

  if (irrecv.decode(&results)) {
    mask = results.value & 0xff;
    Serial.println(mask, HEX);
    //Serial.println(results.value, HEX);
    irrecv.resume(); // Receive the next value


lcd.write(Serial.read());
}
} 
